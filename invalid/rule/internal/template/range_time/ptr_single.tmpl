if i.{{ .field_name }} != nil {
    {{- if len_gt_0 .left_val }}
    {{- if eq .left_val "@now" }}
    var _{{ .struct_name }}_left_{{ .index }} = time.Now()
    {{- end }}
    var time_left_{{ .index }} time.Time
    time_left_{{ .index }}, err = time.Parse({{ .format }}, *i.{{ .field_name }})
    if err != nil {
        err = fmt.Errorf(`invalid<RangeTime>: {{ .struct_name }}.{{ .field_name }} can not be parse to time<%s>`,err)
        return
    }
    if time_left_{{ .index }}.UnixMicro() {{ rRo .left }} _{{ .struct_name }}_left_{{ .index }}.UnixMicro(){
        err = errors.New(`invalid<RangeTime>: {{ .struct_name }}.{{ .field_name }} must be {{ tRo .left }} {{ .left_val }})`)
        return
    }
    {{- end }}
    {{- if len_gt_0 .right_val }}
    {{- if eq .right_val "@now" }}
    var _{{ .struct_name }}_right_{{ .index }} = time.Now()
    {{- end }}
    var time_right_{{ .index }} time.Time
    time_right_{{ .index }}, err = time.Parse({{ .format }}, *i.{{ .field_name }})
    if err != nil {
        err = fmt.Errorf(`invalid<RangeTime>: {{ .struct_name }}.{{ .field_name }} can not be parse to time<%s>`,err)
        return
    }
    if time_right_{{ .index }}.UnixMicro() {{ rRo .right }} _{{ .struct_name }}_right_{{ .index }}.UnixMicro(){
        err = errors.New(`invalid<RangeTime>: {{ .struct_name }}.{{ .field_name }} must be {{ tRo .right }} {{ .right_val }})`)
        return
    }
    {{- end }}
}
